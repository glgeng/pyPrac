正则表达式：一种匹配字符串的规则(注意是匹配字符串)
空字符串也会有一个开始^和结束$
正则表达式能做什么：
    可以定制一个规则
        来确认某一个字符串是否符合规则
        从大段的字符串中找到符合规则的内容

正则表达式的语法：
    1.元字符(所谓的元，本人的理解就是不可分割的最小单元)
        a.字符组 [] [^] | ()  约束的是：在一个字符的位置上 能够出现的 有哪些内容
            [amk]   匹配'a','m'或'k'
            [^abc]  非字符组(跟开始没有关系)，匹配除了a b c 的 任意一个字符
            [0-9]   可以用-表示范围,[0-9]就和[0123456789]是一个意思
            [a-z]   匹配所有的小写字母，直接用[a-z]就可以表示
            [0-9abc] 匹配一个字符
            [0-9][a-z][A-Z] 匹配三个字符


            |                   匹配或
            abc|bg              匹配abc或bg
            注意如果写成，ab|abc   是不能匹配到abc完整的，惰性的，前面ab匹配到了就不找abc了(所以有重叠规则时，长的放前面、短的放后面 abc|ab)
            | 的用法  [1-9]\d{16}[0-9X]|[1-9]\d{14}  身份证号


            ()          把括号里的内容看做一个元字符，而一个元字符后面可以跟一个量词
            用法  [0-9]\d{14}(\d{2}[1-9X])?  身份证号

        b.
        \d == [0-9]         匹配一个 数字                           digit
        \w == [0-9a-zA-Z]   匹配一个 数字或字母或下划线              word
        \s == [\n \t]       匹配一个 回车 或 空格 或 制表符tab       space
            \n      匹配回车
            \t      匹配制表符

        \W                  匹配一个 非数字 或 非字母 或 非下划线
        \S                  匹配非空白
        [\d\D] 或 [\w\W] 或 [\s\S] 匹配所有


        c.
        ^                   匹配字符串的开始(重要)
        $                   匹配字符串的结尾(重要)
            ^hello$ 去匹配'hellohello'
                首先结果是匹配不上的，^意味着从字符串的开始进行匹配，
                匹配到第一个hello的o之后，并没有结束(不是结尾)
                所以匹配不成功

        .                   匹配除了换行符以外的任意字符




    2.量词
        \d{3}       匹配重复三次 如123
        \d\d{3}     就近，{3}只跟紧挨着的\d有关系   匹配4位数字
        \d{3,}      匹配重复至少3次(尽量匹配多次，也可以说成贪婪匹配)
        \d{3,5}     匹配重复 3次 或 4次 或 5次(也是贪婪匹配)

        \d?         匹配数字0次(没有匹配上)或1次
                    \d?  来匹配  a   匹配的结果是两条，两条没有匹配上的结果

        ?           匹配重复0次 或 1次(用在可有可无的匹配)
                    例如：匹配整数或者小数     \d+\.?\d*     缺陷（12.  也能匹配成功）
                                             \d+(\.\d*)?   完美

        +           匹配重复1次 或 更多次

        *           匹配重复0次 或 1次 或 更多次

        注意：*,+,?,{}都是贪婪匹配，也就是尽可能匹配，后面加?号使其变成惰性匹配


    3.特殊的用法和现象
        ?的使用：
            1.如果?紧跟在元字符的后面，那么表示1个量词==>匹配重复0次 或 1次
            2.如果在量词后面紧跟了一个?，表示取消贪婪匹配==>惰性匹配
                ??
                *?
                +?
                最常用==>  .*?x 匹配任意字符直到找到一个x







匹配身份证号：身份证号码是一个长度为15或18个字符的字符串
    如果是15位，则全部由数字组成，首位不能为0
    如果是18位，则前17位全部是数字，末尾可能是数字或x


正则表达式总结：
    元字符
    元字符量词       默认贪婪匹配
    元字符量词?      表示惰性匹配

    元字符后面跟的一定是量词
    只有量词后面跟的?才表明是惰性匹配
    每一个量词只约束前面一个元字符出现多少次
    正常情况下一个量词只能约束一个元字符
    ()可以对()里面整体的元字符进行一个量词约束


练习：
    1.匹配任意长度的正整数                                      [0-9]\d*
    2.匹配小数                                                -?\d+\.\d+
    3.匹配整数或小数                                           -?\d+(\.\d+)?
    4.匹配负数                                                -\d+(\.\d+)?
    5.匹配QQ号                                                 [1-9]\d{4,11}
    6.匹配长度为11位的电话号码                                  1[3-9]\d{9}
    7.长度为8-10位的用户密码(包含数字、字母、下划线、@和?)         [\w@?]{8,10}
    8.匹配验证码(四位数字字母组成)                               [\da-zA-Z]{4}
    9.从类似
        <a>wahaha<\a>
        <b>banana<\b>
        <h1>qqxing<h1>
        这样的字符串中
            1)匹配出wahaha,banana,qqxing内容
            2)匹配出a,b,h1这样的内容


    \([^()]+\)
    \([\d\.+\-*/]+\)


在python中使用正则表达式
    # 转义符
        1.python中的转义
            在python中，字符串\也需要转义
            取消转义  print('D:\\next') 或者写成  print(r'D:\next')

            正则          待匹配字符             匹配结果                                    说明
             \n             \n                  false               在正则表达式中\是有特殊意义的字符，所以要匹配\n本身，用表达式\n无法匹配
            \\n             \n                  true                转义\之后变成\\，即可匹配
            '\\\\n'         '\\n'               true                在python中，字符串\也需要转义(也就是说待匹配字符的第一个\也得在python中进行转义)
            r'\\n'          r'\n'               true                结论：在字符串之前加r，让整个字符串不转义

            加r表示  在过python解释器这一关的时候，所有符号都不进行转义

        2.正则表达式中的转义
        '\('              表示匹配小括号
        '[()+*?/$.]'      在字符组中一些在正则中有特殊意义的字符会现出原形
        '[]'中\w \d \s \W \S \D 都表示它原本的意义
        '[-]'             只有写在字符组的首位的时候表示普通的减号
                          写在其他位置的时候表示范围[1-9]
                          如果就是想匹配减号 [1\-9]

    # re模块
        # findall search match
        # sub subn split
        # compile finditer

    # python中的正则表达式
        # findall会优先显示分组中的内容，要想取消分组优先使用(?:正则表达式)
        # split 遇到分组 会保留分组内被切掉的内容
        # search  如果search中有分组，通过group(n)可以得到group中匹配的内容

# 正则表达式进阶
    # 分组命令
       # (?P<name>正则表达式)  表示给分组起名字
       # (?P=name)表示使用这个分组，这里匹配到的内容应该和分组中的内容完全相同

    # 通过索引使用分组(不推荐)
        # \1 表示使用第1组，匹配到的内容必须和第一个组中的内容完全相同