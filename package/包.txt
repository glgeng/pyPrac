模块说白了就是一个.py文件，一个模块通常对应一个.py文件，模块的真正功能是可以将其导入到其他代码中，并重复使用

包说白了就是一组.py文件 + __init__.py 文件
    导入包时，通常不会导入子模块和子包，但是，可以通过给__init__.py加点作料==>将需要导入的子模块和子包囊括进去


1.无论是import形式还是from...import形式，凡是在导入语句中（而不是在使用时）遇到带点的，都要第一时间提高警觉：这是关于包才有的导入语法
2.包是目录级的（文件夹级），文件夹是用来组成py文件（包的本质就是一个包含__init__.py文件的目录）
3.创建包的目的不是为了运行，而是被导入使用，记住，包只是模块的一种形式而已，包即模块



1.什么是包？         集合了一组.py文件 提供了一组复杂功能
2.为什么要有包？     当提供的功能比较复杂，一个py文件写不下的时候
3.包中都有什么？     __init__.py文件 和 模块
4.直接导入模块
    方法一
        import 包.包.模块
        包.包.模块.变量

    方法二
        from 包.包 import 模块  # 推荐  平时写作业的时候
        模块.变量


5.导入包   读框架源码的时候
           如果希望导入包之后，模块能够正常的运行，那么需要自己去完成包下__init__文件的开发
           分类：
                包中模块的绝对导入
                包中模块的相对导入
                    注：使用了import.相对导入的模块只能被当做模块执行
                        不能当做脚本执行


特别特别特别特别重要重要重要重要******
好好读好好读好好读好好读好好读
特别需要注意的是：
    可以用import导入内置或者第三方模块（已经在sys.path中），
    但是要绝对避免使用import来导入自定义包的子模块(没有在sys.path中)，
    应该使用from... import ...的绝对或者相对导入,且包的相对导入只能用from的形式。

    比如我们想在glance/api/versions.py中导入glance/api/policy.py，
    有的同学一抽这俩模块是在同一个目录下，十分开心的就去做了，它直接这么做
        1 #在version.py中
        2
        3 import policy
        4 policy.get()

        没错，我们单独运行version.py是一点问题没有的，运行version.py的路径搜索就是从当前路径开始的，于是在导入policy时能在当前目录下找到
        但是你想啊，你子包中的模块version.py极有可能是被一个glance包同一级别的其他文件导入，比如我们在于glance同级下的一个test.py文件中导入version.py，如下
            from glance.api import versions
            '''
            执行结果:
            ImportError: No module named 'policy'
            '''

            '''
            分析:
            此时我们导入versions在versions.py中执行
            import policy需要找从sys.path也就是从当前目录找policy.py,
            这必然是找不到的
            '''